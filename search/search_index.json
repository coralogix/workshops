{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coralogix Workshops","text":"<p>Goal: help learn and practice OpenTelemetry and Coralogix RUM integrations Each workshop includes easy-to-deploy reference implementations to see exactly how these integrations work.  </p> <p>These are designed to run on production grade cloud environments except for the RUM workshop which runs on a Mac development environment.  Except for the RUM workshop, these are not designed to run on a desktop or laptop machine regardless of Kubernetes/docker method of installation. </p> <p>Before beginning please consult  Coralogix Docs for any topic of interest. The workshops are not official documentation for the Coralogix platform.  </p>"},{"location":"#workshop-prerequisites","title":"Workshop Prerequisites","text":"<p>Ready to get started? Check the prerequisites.</p>"},{"location":"#opentelemetry-information","title":"OpenTelemetry Information","text":"<p>Coralogix leverages open standard telemetry shippers, and infrastructure/application metrics, traces, and logs utilize OpenTelemetry. Learn more about the OpenTelemetry Overview and Value Proposition.</p>"},{"location":"#apm-and-opentelemetry-collector-tracing-instrumentation","title":"APM and OpenTelemetry Collector &amp; Tracing Instrumentation","text":""},{"location":"#microservices-workshop","title":"Microservices Workshop","text":"<p>Kubernetes / APM - Kubernetes OpenTelemetry Collector for metrics, traces, and logs - OpenTelemetry tracing instrumentation for containerized Python apps - Simulated application using real microservices - Prometheus custom metrics collection - Redis - Sample \"bad\" deployment and errors  </p> <p>OpenTelemetry Collector Configuration Examples - Prometheus - MySQL Metrics + Query Performance - Redis Metrics </p>"},{"location":"#other-containerized-environments","title":"Other Containerized Environments","text":"<p>AWS ECS Fargate (Python) - Microservice container, OpenTelemetry Collector - Complete Fargate task and ECS config instructions  </p> <p>AWS ECS EC2 (Python/node) - OpenTelemetry collector container - Example app container/task and Cloudformation stack</p>"},{"location":"#apm-autogenerators-otel-tracing-instrumentation-demo-apps","title":"APM - Autogenerators: Otel Tracing Instrumentation Demo Apps","text":"<p>Tracing examples for container/monolith: demos for .NET, Node, Java, and Python - Autogenerators </p>"},{"location":"#apm-autoinjection-otel-tracing-on-k8s-with-auto-instrumentation-injection","title":"APM - Autoinjection: Otel Tracing on K8S With Auto Instrumentation Injection","text":"<p>Automatically inject traciong instrumentation in k8s: demos for .NET, Node, Java, and Python - Autoinjection </p>"},{"location":"#apm-ebpf-otel-apm-without-any-instrumentation-uses-linux-kernel-software-based-on-ebpf","title":"APM - eBPF: Otel APM Without Any Instrumentation - uses Linux Kernel Software based on eBPF","text":"<p>Automatically generate APM spans and dashboards without any instrumentation- demos for .NET, Node, Java, and Python - eBPF </p>"},{"location":"#opentelmetry-manual-instrumentation","title":"OpenTelmetry Manual Instrumentation","text":"<p>Examples of Otel APIs/SDKs to export telemetry directly from an application  - Otel Manual Instrumentation </p>"},{"location":"#real-user-monitoring-rum","title":"Real User Monitoring (RUM)","text":"<p>Visualize user experience metrics - Real User Monitoring (RUM) for browsers and mobile apps  </p>"},{"location":"#coralogix-live-demo-scripts","title":"Coralogix Live Demo Scripts","text":"<p>Scripts to install the Collector on a host or Kubernetes - Live Demo Scripts - Make sure to change all variables and refer to Coralogix Docs </p>"},{"location":"#official-opentelemetry-demo","title":"Official OpenTelemetry Demo","text":"<p>Try out the comprehensive demo materials from the OpenTelemetry Project - OpenTelemetry Demo for Kubernetes  </p>"},{"location":"prereqs/","title":"OpenTelemetry Hand-On Workshop Prerequisites","text":"<p>These workshops are designed for advanced users such as devops, developers, and sysadmins to learn about OpenTelemetry / Coralogix RUM and try them with the Coralogix platform. They include easy-to-deploy examples and are meant to be conducted on an Ubuntu or Kubernetes production grade cloud environment, not on personal computers (unless otherwise specified).  </p> <p>Requirements for these workshops include:  </p> <ul> <li>Proficiency with an Integrated Development Environment (IDE) like Visual Studio Code; simple text editors like Notepad are not adequate, though VI can be used if set up as an IDE.  </li> <li>The computer should be set up as an integrated development environment (IDE).  </li> <li>An active Coralogix account and a basic understanding of its features.  </li> <li>Permissions to create resources like virtual machines and Kubernetes clusters in the cloud without restrictions.  </li> <li>Ability to set up virtual machines and Kubernetes clusters and all surrounding cloud infra necessary quickly before the workshop begins.  </li> <li>Direct internet access on the workshop computer, without needing a VPN.  </li> <li>Unrestricted access on computer and in cloud to GitHub, Helm, and the ability to use open source software.  </li> <li>Users should understand the programming languages being used (for example Python) if asking questions about OpenTelemetry for Python.  </li> <li> <p>All k8s examples should be tested in cloud or production grade k8s... local personal computers are not supported for testing due to the derived nature of k8s on local machines .  </p> </li> <li> <p>A unique Coralogix API Key should be ready for the workshop that will be discarded after.  </p> </li> </ul>"},{"location":"prereqs/#workshop-platform","title":"Workshop Platform","text":"<p>The bulk of the workshop is designed for Kubernetes. If you have an existing Kubernetes cluster that can be used as a sandbox, you only need to make sure you have the following installed: - Helm - k9s</p>"},{"location":"otel/about-opentelemetry/","title":"Overview and Value Proposition","text":""},{"location":"otel/about-opentelemetry/#opentelemetry","title":"OpenTelemetry","text":"<p>OpenTelemetry is a standard organized by the Cloud Native Compute Foundation </p> <p>The Cloud Native Compute Foundation publishes standards like Kubernetes and others that are the leading standards in the industry.  </p> <p>OpenTelemetry is comprised of two key elements: - A standard format for metrics, logs, and traces as well as standard protocols for shipping them - OpenTelemetry Software \u00a0\u00a0- OpenTelemetry Collector which can run anywhere (host/container/local) and receives, processes, and exports telemetry \u00a0\u00a0- OpenTelemetry Tracing Instrumentation for many languages that instruments your apps to emit traces and works in two ways   \u00a0\u00a0\u00a0\u00a01. Automatic Instrumentation with no code changes and instruments a long list of frameworks for each language \u00a0\u00a0\u00a0\u00a02. Manual Instrumentation that is added to your code for fine grain trace span building  </p>"},{"location":"otel/about-opentelemetry/#why-opentelemetry-because-observability-should-use-universal-standards","title":"Why OpenTelemetry? Because Observability Should Use Universal Standards","text":"<p>Observability means measuring a system based on its outputs.  </p> <p>This is contrast to installing proprietary software for monitoring/remediation purposes- if a system can simply emit telemetry natively, software is no longer needed.  </p> <p>In a complex environment consisting of servers, containers, cloud, many application languages, and mixes and variations of all of the above, Observability is required to be able to proactively and/or in real time discover and repair problems however sytems are so diverse that traditional post-problem find/fix monitoring solutions no longer function or are scalable.  </p> <p>Monitoring systems traditionally required negotiation with vendors to supply \"monitoring software\" and \"agents\" that are threaded througout an environment. This means annual negotiations are required to keep a business online because technical debt of vendor relationships has to be cured on a regular basis. As systems grow larger and more distributed and complex, the private vendor lock on monitoring creates a fatal reliability flaw in the tech stack.  </p> <p>No one negotiates for HTTP, SQL, HTTPS, TCP etc every year- so why should anyone negotiative for observability formats and agents? These should be based open standards and included as part of day-to-day system building and operations. </p> <p>OpenTelemetry formats and tracing instrumentation allow for devops, operations, and development to scale infinitely without worry of vendor lock-in or future risk to an environment due to proprietary software.  </p>"},{"location":"otel/autogenerators/","title":"Autogenerators","text":""},{"location":"otel/autogenerators/#requirements","title":"Requirements","text":"<p>Prerequisites here </p>"},{"location":"otel/autogenerators/#what-is-an-autogenerator","title":"What Is An Autogenerator?","text":"<p>An <code>autogenerator</code> is a reference implementation of OpenTelemetry that can run as a standalone single deployment application and emits interesting telemetry (metrics/traces/logs) to use as a 'how-to' template for your own OpenTelemetry use.  </p> <p>The goal of a reference implementation is to answer the question \"how do I instrument my app for OpenTelemetry?\" via showing a simple live example app that you can try yourself and then refer to for your own projects.  </p>"},{"location":"otel/autogenerators/#instructions","title":"Instructions","text":"<p>Each autogenerator project contains the following:</p> <p>All Examples - Application source code - Various scripts useful in building, deploying, and running the app. These vary but are labelled clearly i.e. <code>deploy.sh</code> and <code>delete.sh</code>. - Scripts sometimes in order to accomplish a goal i.e. <code>1-configure.sh</code> and <code>2-build.sh</code> - Each script needs to be checked for variables that need to be changed in your environment - Notes about each one on this page. There are no README.md instructions in each repo.  </p> <p>Container Examples - <code>buildcontainer.sh</code> script for building a container - <code>Dockerfile</code> to demonstrate containerization - .yaml deployment example for Kubernetes - Although the container examples are for Kubernetes, you can port them to any container style environment so long as required ports are open and there are no prohibitions for the deployment making requests of itself.  </p> <p>Monolith Examples - Env variable and other setup/run scripts - Otel collector <code>config.yaml</code> if needed - Monolith logs are NOT shipped by Otel Collector- if you want to ship them, they can be written to <code>/var/</code> with an updated Otel collector config  </p> <p>Most of these example create an <code>http client</code> and <code>http server</code> in a loop so that client and server spans are generated.  </p> <p>These examples are under frequent revision so please open an issue with any bug reports.  </p> <p>Before beginning, study Primary Otel docs for instrumentation </p>"},{"location":"otel/autogenerators/#the-autogenerators","title":"The Autogenerators","text":""},{"location":"otel/autogenerators/#step-1-clone-repo","title":"Step 1 - Clone Repo","text":"<pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/autogenerators/#step-2-change-to-autogenerator-directory","title":"Step 2 - Change to Autogenerator Directory","text":"<pre><code>cd workshops/workshops/otel/autogenerators\n</code></pre> <p><code>dotnet8-linux</code> - .NET 8 app on a Linux container - Generates looping requests of dual client/server .NET app - Logs with <code>Microsoft.Extensions.Logging</code> - Otel Docs/Repo </p> <p><code>dotnet6-linux</code> - .NET 6 app on a Linux container - Generates looping requests of <code>api.github.com</code> - Makes error spans - Otel Docs/Repo </p> <p><code>java</code> - Container / monolith built with Maven  - Generates looping requests of a self running Spring server - Trace and span ID log auto-injection using <code>log4j2</code> - Requires Coralogix parsing <code>Body</code> field that contains Trace and Span IDs - Otel Docs/Repo </p> <p><code>node</code> - Container / monolith examples - Generates looping requests of a self running Express server - Trace and span ID log injection using <code>Pino</code> - Does not require parsing for Trace and span IDs - Otel Docs/Repo </p> <p><code>python</code> - Container / monolith examples - Generates looping requests of a self running Flask server - Trace and span ID log injection using <code>Python Logger</code> - Does not require parsing for Trace and span IDs - Otel Docs/Repo </p>"},{"location":"otel/autoinjection/","title":"Autoinjection","text":""},{"location":"otel/autoinjection/#requirements","title":"Requirements","text":"<p>Prerequisites here </p>"},{"location":"otel/autoinjection/#what-is-autoinjecton","title":"What Is Autoinjecton?","text":"<p>OpenTelemetry has an operator that can inject zero code tracing instrumentation into deployments that use Java, Nodejs, Go, .NET, and Python.  </p> <p>This is a great way to easily deploy tracing at scale without changing any code. Further instrumentation configuration can be done via each app's <code>deployment.yaml</code> if desired but this is not necessary.  </p> <p>Official documentation is here: https://opentelemetry.io/docs/kubernetes/operator/automatic/ </p> <p>The autoinjection examples in this workshop all have Dockerfiles, deploy/delete scripts, app code, and everything else needed to easily try this capability.  </p> <p>Note that if a k8s cluster is configured with autoinjection applied to running deployments, they must be restarted with their annotations for the tracing to begin.  </p>"},{"location":"otel/autoinjection/#step-1-clone-repo","title":"Step 1 - Clone Repo","text":"<pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/autoinjection/#step-2-change-to-autoinject-directory","title":"Step 2 - Change to Autoinject Directory","text":"<pre><code>cd workshops/workshops/otel/autoinject\n</code></pre>"},{"location":"otel/autoinjection/#step-3-prep-kubernetes-cluster","title":"Step 3 - Prep Kubernetes Cluster","text":"<p>Cluster prep after Coralogix k8s integration installed: - Install cert manager to enable https endpoints within the cluster- make sure to check and update version of Cert Manager if needed link here - Install the OpenTelemetry operator  </p> <pre><code>helm repo add jetstack https://charts.jetstack.io --force-update\n\nhelm install cert-manager jetstack/cert-manager   --namespace cert-manager   --create-namespace   --version v1.17.0  --set crds.enabled=true\n\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\n\nhelm install opentelemetry-operator open-telemetry/opentelemetry-operator --set \"manager.collectorImage.repository=otel/opentelemetry-collector-k8s\"\n</code></pre> <p>Next apply OpenTelemetry Operator instrumentation:  </p> <pre><code>source apply-instrumentation.sh\n</code></pre>"},{"location":"otel/autoinjection/#step-4-deploy-examples","title":"Step 4 - Deploy Examples","text":"<p>Single command deploys examples in Java, .NET 8, Node, and Python  </p> <pre><code>source deploy-all-examples.sh\n</code></pre> <p>Study the traces in Coralogix.  </p> <p>Cleanup:  </p> <pre><code>source delete-all-examples.sh\nsource delete-instrumentation.sh\n</code></pre>"},{"location":"otel/autoinjection/#step-5-study-examples","title":"Step 5 - Study Examples","text":"<p>The main <code>autoinjection</code> directory has an <code>instrumentation.yaml</code> file that the Otel Operator uses to configure autoinjection. The <code>apply-instrumentation.sh</code> script applies this operator config. Note that there is a difference in the java port using <code>4317</code> vs official otel docs which state to use <code>4318</code>. <code>4317</code> is currently observed as the correct method until further notice.   </p> <p>The <code>deploy-all-examples.sh</code> script deploys all the autogenerators at the same time. To study each: each directory has a <code>deployment.yaml</code> and a script to deploy and delete it.    </p> <p>App deployments must have an annotation to ensure that they will have instrumentation injected i.e.  </p> <pre><code>  template:\n    metadata:\n      labels:\n        name: cx-autoinject-java\n      annotations:\n        instrumentation.opentelemetry.io/inject-java: \"default/instrumentation\"\n</code></pre>"},{"location":"otel/ebpf/","title":"eBPF","text":""},{"location":"otel/ebpf/#requirements","title":"Requirements","text":"<p>Prerequisites here eBPF in this context only runs on Kubernetes with modern Linux kernel based containers.  </p>"},{"location":"otel/ebpf/#official-documentation-here","title":"Official Documentation here","text":"<p>Please read the official documentation thoroughly before proceeding. There are many combinations possible with eBPF installation and this workshop only showcases one of them.  </p>"},{"location":"otel/ebpf/#what-is-ebpf","title":"What is eBPF?","text":"<p>eBPF describes software that runs inside the Linux kernel and can extend its functionality. For Observability purposes, the loaded module is capturing telemetry related to observability such as system calls, network activity, kernel function calls etc.  </p> <p>The Coralogix implementation loads an eBPF agent into the kernels of running containers that exports the eBPF related telemetry and converts it to OpenTelemetry compatiable spans. eBPF spans do not provide traces since they don't have a trace ID. Please carefully read official Coralogix Documenttion  above for more detail.</p>"},{"location":"otel/ebpf/#instructions","title":"Instructions","text":"<p>This workshop is designed to add the eBPF agent to an existing installation of the Coralogix OpenTelemetry helm chart and then deploy simple applications in Python, Node, .NET, and Java to demonstrate the spans and APM capabilities available with eBPF.</p>"},{"location":"otel/ebpf/#step-1-install-the-opentelemetry-collector-on-your-k8s-cluster","title":"Step 1 - Install the OpenTelemetry Collector on your k8s cluster","text":"<p>Easy Coralogix instructions for Complete Observability are here </p>"},{"location":"otel/ebpf/#step-2-clone-repo","title":"Step 2 - Clone Repo","text":"<pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/ebpf/#step-3-change-to-ebpf-directory","title":"Step 3 - Change to eBPF Directory","text":"<pre><code>cd workshops/workshops/otel/ebpf\n</code></pre>"},{"location":"otel/ebpf/#step-4-override-the-opentelemetry-helm-chart-to-add-the-ebpf-agent","title":"Step 4 - Override the OpenTelemetry Helm Chart to add the eBPF Agent","text":"<p>Edit <code>ebpf.yaml</code> and update the globals for your domain and cluster name then:  </p> <pre><code>source deploy-ebpf.sh\n</code></pre>"},{"location":"otel/ebpf/#step-5-deploy-example-applications","title":"Step 5 - Deploy Example Applications","text":"<pre><code>source deploy-all-examples.sh\n</code></pre>"},{"location":"otel/ebpf/#step-6-study-the-results","title":"Step 6 - Study The Results","text":"<p>Note in <code>Coralogix-&gt;Explore-&gt;Traces</code> that the requests are only one span deep, and that the TraceID is not truly utilized for connecting spans. Also note the <code>otel.library.name</code> of <code>coralogix-ebpf-agent</code>.  </p> <p>Coralogix-&gt;APM shows the working service catalog.  </p> <p>Other parts of the Kubernetes system are being traced as well- these can be filtered following instructions in the documentation above.</p>"},{"location":"otel/ebpf/#step-7-cleanup","title":"Step 7 - Cleanup","text":"<pre><code>source delete-all-examples.sh\n</code></pre> <pre><code>helm rollback otel-coralogix-integration\n</code></pre>"},{"location":"otel/ecs-ec2/","title":"OpenTelemetry for AWS ECS-EC2","text":""},{"location":"otel/ecs-ec2/#instructions","title":"Instructions","text":"<p>This example is for basic study only and is not documentation.   Full documentation: https://coralogix.com/docs/ Requirements: - AWS Account - AWS CLI - Intermediate to Advanced skill with ECS-EC2 - Sufficient permissions to configure AWS - Proper IDE i.e. Visual Studio Code   </p>"},{"location":"otel/ecs-ec2/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/ecs-ec2/#step-2-change-to-workshop-dir","title":"Step 2 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/ecs-ec2\n</code></pre>"},{"location":"otel/ecs-ec2/#step-3-prep-requirements","title":"Step 3 - Prep requirements","text":"<p>1 - There are Cloudformation scripts in order used to deploy the examples- change all obvious variables like AWS regions and VARIABLESINCAPS related to Coralogix or your environment` 2 - Identify Coralogix Distro for OpenTelemetry container version here before starting 3 - Study official documentation here: https://github.com/coralogix/cloudformation-coralogix-aws/tree/master/opentelemetry/ecs-ec2</p> <p>These two policies should be tuned for your own production security needs when going into production.   </p>"},{"location":"otel/ecs-ec2/#step-4-execute-workshop","title":"Step 4 - Execute workshop","text":"<p>Deploy the steps in order- but note that there are two examples- a Python and Node example branches as 04 and 04a and 05 and 05a... pick one or the other- although you can do both too!</p>"},{"location":"otel/ecs-ec2/#step-5-study-results-in-coralogix-portal","title":"Step 5 - Study results in Coralogix portal","text":""},{"location":"otel/ecs-ec2/#cleanup","title":"Cleanup","text":"<p>Use the delete scripts to clean up.</p>"},{"location":"otel/ecs-fargate/","title":"OpenTelemetry for AWS ECS-Fargate","text":""},{"location":"otel/ecs-fargate/#instructions","title":"Instructions","text":"<p>Additional Requirements: - AWS Account - Intermediate to Advanced skill with ECS-Fargate - Sufficient permissions to configure AWS  </p>"},{"location":"otel/ecs-fargate/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/ecs-fargate/#step-2-change-to-workshop-dir","title":"Step 2 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/ecs-fargate\n</code></pre>"},{"location":"otel/ecs-fargate/#step-3-prep-requirements-and-deploy-script","title":"Step 3: Prep Requirements and deploy script","text":"<p>Study Coralogix OpenTelemetry ECS Fargate Example Update the <code>deploy-cf.sh</code> script with your API key and Coralogix Region Notice the environment variables in the container definition- ECS Fargate uses a <code>localhost</code> network space for sending traces  </p>"},{"location":"otel/ecs-fargate/#step-4-deploy-cloudformation-to-set-up-fargate-components","title":"Step 4: Deploy Cloudformation to set up Fargate components","text":"<pre><code>source deploy-cf.sh\n</code></pre>"},{"location":"otel/ecs-fargate/#step-5-launch-task","title":"Step 5: Launch Task","text":"<p>Launch according to your standard procedure Ensure the security group can allow for port 5000 requests  </p> <p>The task creates the following containers: - Coralogix Python autogenerator - OpenTelemetry Collector  </p> <p>The microservice container create a Python HTTP client and server that will generate spans and logs and send to Coralogix  </p>"},{"location":"otel/ecs-fargate/#step-6-study-results-in-coralogix-portal","title":"Step 6 - Study results in Coralogix portal","text":""},{"location":"otel/jvmmetrics/","title":"JVM Metrics","text":""},{"location":"otel/jvmmetrics/#requirements","title":"Requirements","text":"<p>Prerequisites here </p>"},{"location":"otel/jvmmetrics/#jvm-metrics-in-opentelemetry","title":"JVM Metrics in OpenTelemetry","text":"<p>OpenTelemetry can gather JVM metrics in multiple ways: - OpenTelemetry Collector Receiver for JMX Metrics - Direct receipt of metrics from OpenTelemetry Java tracing instrumentation</p> <p>In either case, a metrics dashboard provided in this workshop will be used to visualize these metrics.</p>"},{"location":"otel/jvmmetrics/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/jvmmetrics/#step-2-change-to-workshop-dir","title":"Step 2 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/autogenerators/java/monolith\n</code></pre>"},{"location":"otel/jvmmetrics/#step-3-set-up-otel-collector-on-a-linux-host","title":"Step 3 - Set up Otel Collector on a Linux host","text":"<ul> <li>update Coralogix exporter with region and key <code>config-demo-jmx.yaml</code> </li> <li>download current release of otel collector: https://github.com/open-telemetry/opentelemetry-collector-releases/releases</li> <li>update install script with downloaded version of otel collector and run script</li> </ul> <pre><code>source jmx-otel-config-setup.sh\n</code></pre>"},{"location":"otel/jvmmetrics/#step-4-add-jvm-dashboard-to-custom-dashbords","title":"Step 4 - Add jvm dashboard to Custom Dashbords","text":"<pre><code>jvm_metrics.json\n</code></pre>"},{"location":"otel/jvmmetrics/#step-5-add-jvm-dashboard-to-custom-dashbords","title":"Step 5 - Add jvm dashboard to Custom Dashbords","text":"<p>Run the included Java app example  </p> <pre><code>source 4-monolith-install-otel.sh\nsource 5-monolith-run-app.sh\n</code></pre>"},{"location":"otel/logparsing/logparsing/","title":"OpenTelemetry for Log Observability","text":""},{"location":"otel/logparsing/logparsing/#instructions","title":"Instructions","text":"<p>This example is for basic study only and is not documentation.   Full documentation: https://coralogix.com/docs/ Requirements: - Coralogix Acccount - Cloud Linux host (Debian preferred but RPM flavors will work) - Updated versions and sufficient permissions for installing software - Proper IDE i.e. Visual Studio Code </p>"},{"location":"otel/logparsing/logparsing/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/logparsing/logparsing/#step-2-change-to-workshop-dir","title":"Step 2 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/logparsing/\n</code></pre>"},{"location":"otel/logparsing/logparsing/#step-3-set-up-otel-collector-on-a-linux-host","title":"Step 3 - Set up Otel Collector on a Linux host","text":"<p>Download and install latest CONTRIB release version from here: https://github.com/open-telemetry/opentelemetry-collector-releases/releases </p> <p>Collector <code>config.yaml</code> must be configured with Coralogix Exporter. See the \"Send Data to Coralogix\" section for determining telemetry endpoint and and API key: https://coralogix.com/docs/guide-first-steps-coralogix/ </p> <p>See the <code>config.yaml</code> example in <code>./workshops/workshops/otel/logparsing/otelcol</code> This file can be updated in <code>/etc/otelcol/contrib/config.yaml</code> - make a backup of the default version first.    </p> <p>Manage the collector using <code>systemctl</code> i.e. <code>sudo systemctl restart otelcol</code> More info is here: https://coralogix.com/docs/guide-first-steps-coralogix/ </p> <p>You can check Collector status with these status URLS: <code>http://localhost:55679/debug/tracez</code> <code>http://localhost:55679/debug/pipelinez</code>  For more info: zpages docs </p>"},{"location":"otel/logparsing/logparsing/#step-4-prepare-log-example","title":"Step 4 - Prepare Log Example","text":"<ul> <li>Copy the LOG.log.gz file to <code>/tmp/cx</code> </li> <li><code>gunzip Log.log.gz</code> </li> </ul>"},{"location":"otel/logparsing/logparsing/#step-5-update-collector-with-log-receiver","title":"Step 5 - Update Collector with Log Receiver","text":"<ul> <li>Add the following receiver to <code>/etc/otelcol/config.yaml</code> </li> </ul> <pre><code>receivers:\n  filelog:\n    include: [ /tmp/cx/LOG.log ]\n</code></pre> <ul> <li>Add the following pipeline to <code>/etc/otelcol/config.yaml</code> </li> </ul> <pre><code>service:  \n  pipelines:\n    logs:\n      receivers: [otlp, filelog]\n</code></pre> <ul> <li>Restart the collector:</li> </ul> <pre><code>sudo systemctl restart otelcol-contrib.service \n</code></pre> <ul> <li>Check collector status:</li> </ul> <pre><code>sudo systemctl status otelcol-contrib.service \n</code></pre>"},{"location":"otel/logparsing/logparsing/#step-5-study-logs-in-coralogix","title":"Step 5 - Study Logs in Coralogix","text":"<p>The <code>Explore-&gt;Logs</code> option now will show the integrated logs.  </p>"},{"location":"otel/manual-instrumentation/","title":"Manual Instrumentation","text":""},{"location":"otel/manual-instrumentation/#requirements","title":"Requirements","text":"<p>Prerequisites here </p>"},{"location":"otel/manual-instrumentation/#opentelemetry-manual-instrumentation","title":"OpenTelemetry Manual Instrumentation","text":"<p>OpenTelemetry has SDKs and APIs that allow for the manual creation export of metrics, logs, and traces. (Full documentation here here: https://opentelemetry.io/docs/languages/)[https://opentelemetry.io/docs/languages/]  </p>"},{"location":"otel/manual-instrumentation/#coralogix-manual-instrumentaiton-examples","title":"Coralogix Manual Instrumentaiton Examples","text":"<p>Each example contains the following:  </p> <p>All Examples - Application source code - Various scripts useful in building, deploying, and running the app. These vary but are labelled clearly i.e. <code>deploy.sh</code> and <code>delete.sh</code>. - Scripts sometimes in order to accomplish a goal i.e. <code>1-configure.sh</code> and <code>2-build.sh</code> - Each script needs to be checked for variables that need to be changed in your environment - Notes about each one on this page or see the README.md with each example   </p> <p>Container Examples - <code>buildcontainer.sh</code> script for building a container - <code>Dockerfile</code> to demonstrate containerization - .yaml deployment example for Kubernetes - Although the container examples are for Kubernetes, you can port them to any container style environment so long as required ports are open and there are no prohibitions for the deployment making requests of itself.  </p> <p>Host Examples - Env variable and other setup/run scripts - Otel collector <code>config.yaml</code> if needed  </p> <p>Serverless - OpenTelemetry on serverless runs as a virtual OpenTelemetry collector  - Set export destination to <code>localhost</code> and appropriate port for telemetry  </p> <p>These examples are under frequent revision so please open an issue with any bug reports.  </p>"},{"location":"otel/manual-instrumentation/#the-examples","title":"The Examples","text":""},{"location":"otel/manual-instrumentation/#step-1-clone-repo","title":"Step 1 - Clone Repo","text":"<pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/manual-instrumentation/#step-2-change-to-examples-directory","title":"Step 2 - Change to Examples Directory","text":"<pre><code>cd workshops/workshops/otel/manual-instrumentation\n</code></pre> <p><code>python</code> - Generates metrics and exports directly to an OpenTelemetry collector   - Example is for host deployment- see the other examples for how to containerize  - Metric generated is: <code>latest_random_number</code> </p> <p><code>go-logs-metrics</code> - Golang app - Generates metrics and logs directly to an OpenTelemetry collector - Can be run on host and has k8s deployment example as well - Metric generated is: <code>random-metrics-app</code> </p> <p><code>ruby-logs-metrics</code>  - Ruby app - Generates metrics and logs directly to an OpenTelemetry collector - Can be run on host and has k8s deployment example as well  - Metric generated is: <code>operation_duration_seconds</code> </p>"},{"location":"otel/microservices/","title":"OpenTelemetry Microservices / Kubernetes","text":""},{"location":"otel/microservices/#instructions","title":"Instructions","text":"<p>Requirements: - These prerequisites - A Kubernetes cluster i.e. EKS/GKE/AKS for a sandbox environment. Localized k8s on a personal computer is not supported.  </p>"},{"location":"otel/microservices/#step-1-install-the-opentelemetry-collector-on-your-k8s-cluster","title":"Step 1 - Install the OpenTelemetry Collector on your k8s cluster","text":"<p>Easy Coralogix instructions for Complete Observability are here </p>"},{"location":"otel/microservices/#step-2-clone-workshop","title":"Step 2 - Clone workshop","text":"<pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/microservices/#step-3-change-to-workshop-dir","title":"Step 3 - Change to workshop dir","text":"<pre><code>cd workshops/workshops/otel/microservices\n</code></pre>"},{"location":"otel/microservices/#step-4-deploy-example-to-k8s","title":"Step 4 - Deploy example to k8s","text":"<p>If you want to change the namespace, edit <code>yaml/deploy-all.yaml</code> Tthree services will appear:  </p> <ul> <li><code>cx-shopping-cart-reqs</code> - a requesting service initiating a transaction  </li> <li><code>cx-payment-gateway-flask</code> - a server that is a bridge for a transaction to a database- returns a transaction ID to the <code>shopping-cart</code> </li> <li><code>cx-redis</code> - an instance of a redis database used for a transaction</li> </ul> <pre><code>source deploy-all.sh\n</code></pre> <p>Deploys the following as seen from the <code>http://cx-payment-gateway-flask:5000/</code> root span:  </p> <p>Note: images may vary from actual UI due to frequent updates: </p> <p>With healthy low latency spans for all services:  </p> <p> </p>"},{"location":"otel/microservices/#step-5-simulate-cicd-scenarios","title":"Step 5 - Simulate CI/CD scenarios","text":"<p>Study results in Coralogix portal</p> <p>Simulate a \"bad\" deployment:  </p> <pre><code>source deploy-bad.sh\n</code></pre> <p>This deployment will cause severe sporadic problems in <code>payment-gateway</code> such as 500s and latency in the service response along with a drop in transaction volume. You can see the latency spikes here:    </p> <p> </p> <p>Alerts and automation can be built around span latency or Payment Gateway 500 responses.  </p> <p>Roll back the bad deployment for the services to return to normal:  </p> <pre><code>source deploy-good.sh\n</code></pre> <p>Span latency will return to normal and Payment Gateway 500 responses will cease.  </p>"},{"location":"otel/microservices/#step-6-study-how-opentelemetry-tracing-instrumentation-works","title":"Step 6 - Study how OpenTelemetry tracing instrumentation works","text":"<p>OpenTelemetry Instrumentation For Containerized Apps - Dockerfiles for the containers contain OpenTelemetry auto instrumentation for Python and are in <code>/python</code> root level - Study Otel Python Auto Instrumentation - Notice how the Dockerfile adds the automatic instrumentation - And observe how the kickstart script uses the instrumenting command  </p> <p>Kubernetes Deployments for Otel Tracing Instrumentation  - <code>.yaml</code> deployment files are in <code>python/yaml</code> and show how environment variables are used to control the instrumentation - study the deploy-all.yaml which shows the environment variables that control OpenTelemetry tracing instrumentation. Focus on how the Kubernetes Downward API use of <code>status.hostIP</code> to tell the instrumentation where to send traces: to the IP adddress of the host node on port 4317 - this is the default GRPC endpoint for OTLP trace spans    </p> <p>Instrumented Applications and Frameworks - The Python apps that drive this example are in the <code>python/apps</code> dir - Examine the frameworks used to show how tracing picks up their execution  - Note that the <code>python requests</code> library is used to make http requests, and that OpenTelemetry Python Instrumentation lists <code>requests</code> as an automatically instrumented library </p>"},{"location":"otel/microservices/#cleanup","title":"Cleanup","text":"<p>To remove all the deployments/services/pods from the example from your k8s cluster (ignore any errors it reports):  </p> <pre><code>source delete-all.sh\n</code></pre>"},{"location":"otel/monolithdeprecated/node/","title":"OpenTelemetry for Node.js / Monolith","text":""},{"location":"otel/monolithdeprecated/node/#instructions","title":"Instructions","text":"<p>This example is for basic study only and is not documentation.   Full documentation: https://coralogix.com/docs/ Requirements: - Coralogix acccount - Cloud Linux host (Debian is preferred- workshop instructions are for Debian Linux but if RPM is preferred instructions can be modified) - Updated versions and sufficient permissions for installing open source software - Current verson of <code>node</code> and <code>npm</code> installed https://nodejs.org/ - Ensure that the Node version is current (20 or higher).  See https://deb.nodesource.com/ for Ubuntu installation instructions - Proper IDE i.e. Visual Studio Code </p>"},{"location":"otel/monolithdeprecated/node/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/monolithdeprecated/node/#step-2-change-to-workshop-dir","title":"Step 2 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/monolith-workshop/node/\n</code></pre>"},{"location":"otel/monolithdeprecated/node/#step-3-set-up-otel-collector-on-a-linux-host","title":"Step 3 - Set up Otel Collector on a Linux host","text":"<p>Download and install latest CONTRIB release version from here: https://github.com/open-telemetry/opentelemetry-collector-releases/releases </p> <p>Collector <code>config.yaml</code> must be configured with Coralogix Exporter. See the \"Send Data to Coralogix\" section for determining telemetry endpoint and and API key: https://coralogix.com/docs/guide-first-steps-coralogix/ </p> <p>See the <code>config.yaml</code> example in <code>./workshops/workshops/otel/monolith-workshop/node/otelcol</code> This file can be updated in <code>/etc/otelcol/contrib/config.yaml</code> - make a backup of the default version first.    </p> <p>Manage the collector using <code>systemctl</code> i.e. <code>sudo systemctl restart otelcol</code> More info is here: https://coralogix.com/docs/guide-first-steps-coralogix/ </p> <p>You can check Collector status with these status URLS: <code>http://localhost:55679/debug/tracez</code> <code>http://localhost:55679/debug/pipelinez</code>  For more info: zpages docs </p>"},{"location":"otel/monolithdeprecated/node/#step-4-run-node-client-in-new-terminal","title":"Step 4 - Run Node client in new terminal","text":"<p>Demo app will make requests of <code>https://api.github.com</code> and require `ctrl-c`` to exit.</p> <p>in <code>./workshops/workshops/otel/monolith-workshop/node/</code> </p> <p>Install node.js OpenTelemetry Instrumentation:  </p> <pre><code>setup-node.sh\n</code></pre> <p>Setup environment variables for OpenTelemetry:</p> <pre><code>setup-node-env.sh\n</code></pre> <p>Start demo app:  </p> <pre><code>start-node.sh\n</code></pre> <p>Stop app with <code>ctrl-c</code> when ready.</p>"},{"location":"otel/monolithdeprecated/node/#step-5-study-results-in-coralogix-portal","title":"Step 5 - Study results in Coralogix portal","text":"<p>The shell scripts show how a monolith is set up and instrumented for OpenTelemetry. Traces can be found in <code>Explore-&gt;Tracing</code> Additionally, host metrics are available via Coralogix's metrics observability tools.  </p>"},{"location":"otel/monolithdeprecated/python/","title":"OpenTelemetry for Python / Monolith","text":""},{"location":"otel/monolithdeprecated/python/#instructions","title":"Instructions","text":"<p>This example is for basic study only and is not documentation.   Full documentation: https://coralogix.com/docs/ Requirements: - Coralogix acccount - Cloud Linux host (Debian is preferred- workshop instructions are for Debian Linux but if RPM is preferred instructions can be modified) - Current versions and sufficient permissions for installing open source software - Current versons (&gt;3.10) of <code>python</code> and <code>pip</code> installed  - Proper IDE i.e. Visual Studio Code  </p>"},{"location":"otel/monolithdeprecated/python/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/monolithdeprecated/python/#step-2-change-to-workshop-dir","title":"Step 2 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/monolith-workshop/python/\n</code></pre>"},{"location":"otel/monolithdeprecated/python/#step-3-set-up-otel-collector-on-a-linux-host","title":"Step 3 - Set up Otel Collector on a Linux host","text":"<p>Download and install latest CONTRIB release version from here: https://github.com/open-telemetry/opentelemetry-collector-releases/releases </p> <p>Collector <code>config.yaml</code> must be configured with Coralogix Exporter. See the \"Send Data to Coralogix\" section for determining telemetry endpoint and and API key: https://coralogix.com/docs/guide-first-steps-coralogix/ </p> <p>See the <code>config.yaml</code> example in <code>./workshops/workshops/otel/monolith-workshop/</code> and configure this for your system / Coralogix account. This file can be updated in <code>/etc/otelcol-contrib/config.yaml</code> - make a backup of the default version first.    </p> <p>Manage the collector using <code>systemctl</code> i.e. <code>sudo systemctl restart otelcol-contrib.service</code> More info is here: https://coralogix.com/docs/guide-first-steps-coralogix/ </p> <p>You can check Collector status with these status URLS: <code>http://localhost:55679/debug/tracez</code> <code>http://localhost:55679/debug/pipelinez</code>  For more info: zpages docs </p>"},{"location":"otel/monolithdeprecated/python/#step-4-run-python-app","title":"Step 4 - Run Python App","text":""},{"location":"otel/monolithdeprecated/python/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>For ubuntu Run <code>sudo apt upgrade</code> to upgrde already installed packages. If you receive a message to reboot your server do so before moving on to the next steps.</li> <li>Run <code>python3 --version</code> to check you have python3 installed. If not follow the python3 installation document for your linux distribution. For ubuntu follow</li> <li>Ensure python venv is installed  </li> <li>Run <code>pip3 --version</code> to check pip3 is installed. If not follow the pip3 installation documentation for your linux distribution. For ubuntu use command <code>sudo apt-get install python3-pip</code></li> </ul>"},{"location":"otel/monolithdeprecated/python/#run-python-app","title":"Run Python App","text":"<p>This application creates a client and Flask server on the host and makes requests of it.  </p> <p>Run following scripts found under <code>./python</code>:</p> <pre><code>source 1-setup-python.sh\nsource 2-setup-python-env.sh\nsource 3-start-python.sh\n</code></pre> <p>Note: Running <code>source setup-python.sh</code> would output long list of packages and with messages like Successfully installed opentelemetry-instrumentation-some-package. To exit the running app, use <code>ctrl-c</code> and you will be in the venv shell- exit with <code>deactivate</code> </p>"},{"location":"otel/monolithdeprecated/python/#step-5-study-results-in-coralogix-portal","title":"Step 5 - Study results in Coralogix portal","text":"<p>Logs with span/trace IDs, and a complete client/server service will be available.  </p>"},{"location":"otel/monolithdeprecated/windows/","title":"OpenTelemetry for .NET / Monolith","text":""},{"location":"otel/monolithdeprecated/windows/#instructions","title":"Instructions","text":"<p>This example is for basic study only and is not documentation.   Full documentation: https://coralogix.com/docs/ Requirements: - Windows Server 2019 or newer   - Updated versions and sufficient permissions for downloading and installing software and no restrictions on GitHub domain   - .NET Framework version supported by OpenTelemetry: check here - PowerShell 5.1 or higher - Proper IDE i.e. Visual Studio Code </p>"},{"location":"otel/monolithdeprecated/windows/#about-opentelemetry-for-net","title":"About OpenTelemetry For .NET","text":"<p>You can find the complete instruction for .NET OpenTelemetry Agent Instrumentation is in .NET OpenTelemetry GitHub Repository. </p> <p>There are three key steps to sending traces from a .NET application on Windows: - Install the OpenTelemetry collector - Install OpenTelemetry .NET instrumentation - Run a sample .NET application to test traces  </p>"},{"location":"otel/monolithdeprecated/windows/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/monolithdeprecated/windows/#step-2-otel-collector-installation","title":"Step 2 - OTEL Collector Installation","text":"<p>Download and install latest CONTRIB release version from here: https://github.com/open-telemetry/opentelemetry-collector-releases/releases </p> <p>Use the following example from this repo a template for the OTEL collector config: <code>/workshops/workshops/otel/monolith-workshop/dotnet-windows/otelcol/config.yaml</code> </p> <p>In <code>config.yaml</code> adjust the domains and your Coralogix private key shown in the snippet below. Also define your application &amp; subsystem name tags.</p> <p>References: - Coralogix Endpoints - Coralogix Private Key - Application &amp; Subsystem Names</p> <pre><code>#config.yaml\n\nexporters:\n  logging:\n    verbosity: detailed\n  coralogix:\n  coralogix:\n    # The Coralogix domain\n    domain: \"yourdomain\"\n    # Your Coralogix private key is sensitive\n    private_key: \"yourkey\"\n\n    # (Optional) Ordered list of Resource attributes that are used for Coralogix\n    # AppName and SubSystem values. The first non-empty Resource attribute is used.\n    # Example: application_name_attributes: [\"k8s.namespace.name\", \"service.namespace\"]\n    # Example: subsystem_name_attributes: [\"k8s.deployment.name\", \"k8s.daemonset.name\", \"service.name\"]\n    application_name_attributes:\n    - \"service.namespace\"\n    subsystem_name_attributes:\n    - \"service.name\"\n\n    # Traces, Metrics and Logs emitted by this OpenTelemetry exporter \n    # are tagged in Coralogix with the default application and subsystem constants.\n    application_name: \"workshop\"\n    subsystem_name: \"monolith\"\n\n    # (Optional) Timeout is the timeout for every attempt to send data to the backend.\n    timeout: 30s\n</code></pre> <p>Next: run the collector using the command</p> <pre><code>otelcol-contrib.exe --config=config.yaml\n</code></pre>"},{"location":"otel/monolithdeprecated/windows/#step-3-install-net-instrumentation","title":"Step 3 - Install .NET Instrumentation","text":"<p>You can find the complete instructions for .NET OpenTelemetry Agent Instrumentation is in .NET OpenTelemetry GitHub Repository.  </p> <p>Below is a shortcut set of instructions but these may be updated in the official documentation above, so we recommend following the officical set.  </p>"},{"location":"otel/monolithdeprecated/windows/#quick-start","title":"Quick start","text":"<p>The official Otel instrumentation guide shows the following: Run the commands below in your PowerShell. Update the <code>\"MyServiceDisplayName\"</code> with the name of your application.  </p> <pre><code># Download the module\n$module_url = \"https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/releases/latest/download/OpenTelemetry.DotNet.Auto.psm1\"\n$download_path = Join-Path $env:temp \"OpenTelemetry.DotNet.Auto.psm1\"\nInvoke-WebRequest -Uri $module_url -OutFile $download_path -UseBasicParsing\n\n# Import the module to use its functions\nImport-Module $download_path\n\n# Install core files\nInstall-OpenTelemetryCore\n\n# Set up the instrumentation for the current PowerShell session\nRegister-OpenTelemetryForCurrentSession -OTelServiceName \"MyServiceDisplayName\"\n</code></pre> <p>Next, configure the follwing Environment Variables</p> <pre><code>$env:OTEL_RESOURCE_ATTRIBUTES='service.name=dotnetsvc,application.name=dotnetapp cx.application.name=dotnetappcx,cx.subsystem.name=dotnetsubcx'\n$env:OTEL_EXPORTER_OTLP_TRACES_ENDPOINT='localhost:4317'\n$env:OTEL_EXPORTER_OTLP_TRACES_PROTOCOL='grpc'\n</code></pre> <p>Finally, run your dotnet application with</p> <pre><code>dotnet run\n</code></pre>"},{"location":"otel/monolithdeprecated/windows/#step-4-example-application","title":"Step 4 - Example Application","text":"<p>You can download &amp; instrument the example application: <code>./workshops/workshops/otel/monolith-workshop/dotnet-windows/ExampleApp/</code> provided in this repository for testing.  </p> <p>The example sends traces of <code>http get</code> requests of a public URL.  Use <code>dotnet run</code> to start the application.  </p> <p>You may want to open it first in Visual Studio 2022 or higher to ensure dependencies are installed first and then run from the Visual Studio 2022 console.</p>"},{"location":"otel/monolithdeprecated/windows/#aspnet","title":"ASP.NET","text":"<p>IIS / ASP.NET follows a different instruction path for instrumentation and is shown here: https://opentelemetry.io/docs/instrumentation/net/automatic/</p>"},{"location":"otel/mysql/","title":"OpenTelemetry Collector Configuration for MySQL","text":""},{"location":"otel/mysql/#instructions","title":"Instructions","text":"<p>Complete the Microservices Workshop or install the OpenTelemetry Collector on your k8s cluster  </p> <p>Easy Coralogix instructions for Complete Observability are here </p>"},{"location":"otel/mysql/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo or use existing clone of it:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/mysql/#step-2-change-to-workshop-dir","title":"Step 2 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/microservices/mysql\n</code></pre>"},{"location":"otel/mysql/#step-a-deploy-the-example-mysql-database-deployment-and-sql-query-app","title":"Step A - Deploy the example MySQL database deployment and SQL query app","text":"<p>In: <code>mysql/1-mysql-deployment</code> <code>source deploy-mysqld.sh</code> </p> <p>In: <code>mysql/2-mysqlqueryapp</code> <code>source deploy-mysqlquery.sh</code> </p>"},{"location":"otel/mysql/#step-b-deploy-the-otel-collector-mysql-receiver","title":"Step B - Deploy the Otel Collector MySQL Receiver","text":"<p>In <code>mysql/3-mysqlreceiver</code> Update the global variables first and then: <code>source deploy-override.sh</code> </p>"},{"location":"otel/mysql/#step-c-deploy-the-otel-sql-query-receiver","title":"Step C - Deploy the Otel SQL Query Receiver","text":"<p>In <code>mysql/4-sqlqueryreceiver</code> Update the global variables first and then: <code>source deploy-override.sh</code> </p>"},{"location":"otel/mysql/#step-6-upload-dashboard-example-to-custom-dashboards","title":"Step 6 - Upload dashboard example to Custom Dashboards","text":"<p>Coralogix-&gt;Dashboards-&gt;Custom Dashboards-&gt;New-&gt;Import </p> <p>Import: <code>mysql/dashboard-mysql.json</code> </p>"},{"location":"otel/mysql/#step-7-study-deployment-examples","title":"Step 7 - Study deployment examples","text":"<p><code>mysqlreceiver</code> - override yaml shows the MySQL receiver configuration example  </p> <p><code>sqlqueryreceiver</code> - override yaml shows the SQL synthetic query configuration example  </p> <p>Observability samples of both are shown on the MySQL Custom Dashboard  </p>"},{"location":"otel/mysql/#step-8-cleanup","title":"Step 8 - Cleanup","text":"<p>Roll back to remove receivers: <code>helm rollback otel-coralogix-integration 1</code> (or your proper previous version) </p> <p>Delete the sample MySQL Database: In: <code>mysql/1-mysql-deployment</code> <code>source delete-mysqld.sh</code>  In: <code>mysql/2-mysqlqueryapp</code> <code>source delete-mysqlquery.sh</code> </p>"},{"location":"otel/opentelemetrydemo/","title":"OpenTelemetry Demo","text":"<p>Based on the official Opentelemetry Demo </p>"},{"location":"otel/opentelemetrydemo/#instructions","title":"Instructions","text":""},{"location":"otel/opentelemetrydemo/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone repo or use existing clone of it:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"otel/opentelemetrydemo/#step-2-change-to-workshop-dir","title":"Step 2 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/opentelemetrydemo\n</code></pre>"},{"location":"otel/opentelemetrydemo/#step-3-update-the-opentelemetry-agent-make-sure-to-opdate-the-globals-first","title":"Step 3 - Update the OpenTelemetry Agent - make sure to opdate the globals first","text":"<p><code>source 1-deploy-override.sh</code> </p>"},{"location":"otel/opentelemetrydemo/#step-4-install-the-opentelemetry-demo-and-study-the-results","title":"Step 4 - Install the OpenTelemetry Demo and study the results","text":"<p><code>source 2-install-demo.sh</code> </p>"},{"location":"otel/opentelemetrydemo/#step-5-cleanup-delete-the-opentelemetry-demo","title":"Step 5 - Cleanup: Delete the OpenTelemetry Demo","text":"<p><code>source 3-delete-demo.sh</code> </p>"},{"location":"otel/opentelemetrydemo/#step-6-rollback-override","title":"Step 6 - Rollback override","text":"<p><code>helm rollback otel-coralogix-integration</code> </p>"},{"location":"otel/prometheus/","title":"Prometheus for OpenTelemetry Collector","text":""},{"location":"otel/prometheus/#instructions","title":"Instructions","text":"<p>Complete the Microservices Workshop or install the OpenTelemetry Collector on your k8s cluster  </p> <p>Easy Coralogix instructions for Complete Observability are here </p>"},{"location":"otel/prometheus/#step-1-deploy-the-prometheus-example-metric-generators","title":"Step 1 - Deploy the Prometheus example metric generators","text":"<p>From <code>/workshops/workshops/otel/microservices/prometheus</code> directory in repo:  </p> <pre><code>source deploy-prom-app.sh \n</code></pre> <p>Two deployments appear each generating random number gauges with metric names: <code>prom1</code> and <code>prom2</code> </p>"},{"location":"otel/prometheus/#step-2-prometheus-simple-receiver","title":"Step 2 - Prometheus Simple Receiver","text":"<ul> <li>(Prometheus Simple Receiver Docs) declares explicit targts for scraping metrics  </li> <li>Study the override file called <code>override-prometheus-simple.yaml</code> to understand how it works  </li> <li>Update the <code>Cluster</code> name and <code>Domain</code> to match your stack and deploy:    </li> </ul> <pre><code>source deploy-prom-simple.sh\n</code></pre> <ul> <li>You can now see metrics in Coralogix portal called <code>prom1</code> and <code>prom2</code> </li> <li>To restore original OpenTelemetry Collector config:  </li> </ul> <pre><code>helm rollback otel-coralogix-integration 1 (or your previous helm version)\n</code></pre>"},{"location":"otel/prometheus/#step-3-prometheus-autodiscovery-receivercreator","title":"Step 3 - Prometheus Autodiscovery ReceiverCreator","text":"<ul> <li>(Prometheus Auto ReceiverCreator Docs) uses various features of OpenTelmetry collector to create an autodiscovery set of receivers based on watching for changes in deployments. This will find all self declared Prometheus endpoints in deployments.    </li> <li>Study the override file called <code>override-prometheus-auto.yaml</code> to understand how it works  </li> <li>Update the <code>Cluster</code> name and <code>Domain</code> to match your stack and deploy:    </li> </ul> <pre><code>source deploy-prom-auto.sh\n</code></pre> <ul> <li>You can now see metrics in Coralogix portal called <code>prom1</code> and <code>prom2</code> </li> <li>To restore original OpenTelemetry Collector config:  </li> </ul> <pre><code>helm rollback otel-coralogix-integration 1 (or your previous helm version)\n</code></pre> <ul> <li>To delete the Prometheus metrics deployment:</li> </ul> <pre><code>source delete-prom-app.sh\n</code></pre>"},{"location":"otel/prometheus/#cleanup","title":"Cleanup","text":"<p>Roll back to original Collector config:  </p> <pre><code>helm rollback otel-coralogix-integration 1 (or your previous helm version)\n</code></pre> <p>From: <code>/workshops/workshops/otel/microservices/prometheus</code> </p> <pre><code>source delete-all.sh\n</code></pre>"},{"location":"otel/redis/","title":"OpenTelemetry Collector Configuration for redis","text":""},{"location":"otel/redis/#instructions","title":"Instructions","text":"<p>Complete the Microservices Workshop and leve the example running</p>"},{"location":"otel/redis/#step-1-change-to-workshop-dir","title":"Step 1 - Change to workshop dir","text":"<p>Change to the proper directory for workshop example:  </p> <pre><code>cd ./workshops/workshops/otel/microservices\n</code></pre>"},{"location":"otel/redis/#step-2-deploy-the-otel-collector-redis-receiver","title":"Step 2 - Deploy the Otel Collector Redis Receiver","text":"<p>In: <code>redis/redis</code> <code>source deploy-redis.sh</code> </p>"},{"location":"otel/redis/#step-3-upload-dashboard-example-to-custom-dashboards","title":"Step 3 - Upload dashboard example to Custom Dashboards","text":"<p>Coralogix-&gt;Dashboards-&gt;Custom Dashboards-&gt;New-&gt;Import </p> <p>Import: <code>redis/dashboard.json</code> </p>"},{"location":"otel/redis/#step-4-study-deployment-examples","title":"Step 4 - Study deployment examples","text":"<p><code>redisreceiver</code> - override yaml shows the redis receiver configuration example  </p> <p>Observability samples of both are shown on the redis Custom Dashboard  </p>"},{"location":"otel/redis/#cleanup","title":"Cleanup","text":"<p>Roll back to remove receivers: <code>helm rollback otel-coralogix-integration 1</code> (or your proper previous version)</p>"},{"location":"otel/tailsampling/","title":"Tail Sampling","text":""},{"location":"otel/tailsampling/#instructions","title":"Instructions","text":"<p>Complete the Microservices Workshop or install the OpenTelemetry Collector on your k8s cluster: Easy Coralogix instructions for Complete Observability are here </p>"},{"location":"otel/tailsampling/#step-1-deploy-python-autogenerator","title":"Step 1 - Deploy Python Autogenerator","text":"<ul> <li>In <code>/workshops/workshops/otel/autogenerators/python/container</code> directory in repo  </li> <li>Configure <code>.yaml</code> with your globals  </li> <li>Deploy the Python autogenerator  </li> </ul> <pre><code>source deploy-autogen-py.sh \n</code></pre>"},{"location":"otel/tailsampling/#step-2-configure-and-deploy-tail-sampling-example","title":"Step 2 - Configure and Deploy Tail Sampling Example","text":"<ul> <li>In <code>/workshops/workshops/otel/microservices/tailsampling</code> directory in repo  </li> <li>Configure <code>.yaml</code> with your globals  </li> <li>Deploy the example  </li> </ul> <pre><code>source deploy-tailsampling.sh \n</code></pre>"},{"location":"otel/tailsampling/#step-3-study-results-in-coralogix","title":"Step 3 - Study results in Coralogix","text":"<ul> <li>Notice that trace quantities have been reduced 90%  </li> <li>This example is based on Coralogix official documentation for Tail Sampling</li> </ul>"},{"location":"rum/","title":"Real User Monitoring","text":""},{"location":"rum/#browser-rum-workshop","title":"Browser RUM Workshop","text":"<ul> <li>This example shows a browser-&gt;front-&gt;back end tracing example app running on a Mac (can be run on Windows).  </li> <li>The browser will call a <code>frontend</code> service which then calls a <code>backend gateway</code> service, and the RUM session trace ID will be propagated, showing front-to-back tracing.       </li> <li>The browser session RUM trace will be sent directly to Coralogix, and the locally hosted Node frontend/backend apps will send trace spans through the localhost OpenTelemetry collector to Coralogix.  </li> <li>Logs will be printed to the console and not collected by the collector in this example\u2014the focus is on tracing.  </li> </ul>"},{"location":"rum/#step-1-setup","title":"Step 1 - Setup","text":"<p>Clone the repository:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"rum/#step-2-install-and-run-an-opentelemetry-collector-on-your-mac-can-work-for-windows-as-well","title":"Step 2 - Install and run an OpenTelemetry Collector on your Mac (Can work for Windows as well)","text":"<p>Start a new terminal - this must be run in a dedicated terminal (see screenshot below).      </p> <p>Navigate to the <code>otelcol</code> directory:</p> <pre><code>cd ./workshops/workshops/rum/otelcol\n</code></pre> <p>Download a current release of the contrib OpenTelemetry Collector for your Mac (Apple Silicon are the <code>darwin_arm</code> releases): https://github.com/open-telemetry/opentelemetry-collector-releases/releases</p> <p>Configure the Coralogix Exporter in <code>otel-config.yaml</code> with your Coralogix key and domain:</p> <pre><code>./otel-contrib --config otel-config.yaml\n</code></pre>"},{"location":"rum/#step-3-execute-the-rum-workshop","title":"Step 3 - Execute the RUM workshop","text":"<ol> <li> <p>Start a new terminal - this must be run in a dedicated terminal (see screenshot below).</p> </li> <li> <p>Ensure current Node.js and npm are installed.</p> </li> <li> <p>Add Coralogix RUM integration:</p> </li> <li>In <code>src/index.js</code>, add the Coralogix RUM <code>Browser SDK</code> and <code>User Context and Labels</code> at the top, and make sure to include the commented trace capturing stanza such that it looks like:</li> </ol> <p><code>javascript    CoralogixRum.init({       public_key: 'YOURKEY',       application: 'YOURAPPNAME',       version: 'YOURVERSION',       coralogixDomain: 'YOURCORALOGIXDOMAIN',       traceParentInHeader: {          enabled: true,          options: {             propagateTraceHeaderCorsUrls: [new RegExp('.*')],          },       },    });</code></p> <ol> <li> <p>Set up node packages: <code>bash    source 1-setup-node.sh</code></p> </li> <li> <p>Package files using webpack: <code>bash    source 2-webpack.sh</code></p> </li> <li> <p>Start the node backend gateway service <code>bash    source 3-node-backend.sh</code></p> </li> <li> <p>Start the node frontend service <code>bash    source 4-node-frontend.sh</code></p> </li> </ol> <p>Your screen should now look like the screenshot below, with the OpenTelemetry Collector in one terminal, the backend in another, and the frontend in another: </p> <ol> <li>Open web browser to exercise RUM sessions </li> <li>Open a browser to <code>http://localhost:3000</code>.  </li> <li> <p>Try each option on the page to exercise RUM trace examples.</p> </li> <li> <p>Study the results in Coralogix </p> </li> <li> <p>Web browser RUM trace - notice the traceID: </p> </li> <li> <p>Backend gateway service - the traceID is the same as the web browser RUM session ID, demonstrating front-to-back tracing: </p> </li> <li> <p>Optional: Clean up Node packages and webpack artifacts: <code>bash     source 6-cleanup.sh</code></p> </li> </ol>"},{"location":"rum/#mobile","title":"Mobile","text":""},{"location":"rum/#step-1-setup_1","title":"Step 1 - Setup","text":"<p>Clone the repository:</p> <pre><code>git clone https://github.com/coralogix/workshops\n</code></pre>"},{"location":"rum/#step-2-change-to-the-workshop-directory","title":"Step 2 - Change to the workshop directory","text":"<p>Navigate to the proper directory for the workshop example:</p> <pre><code>cd ./workshops/workshops/mobilerum\n</code></pre>"},{"location":"rum/#step-3-the-workshops","title":"Step 3 - The Workshops","text":"<p>The following examples are currently available: - React Native - iOS: Swift, UIKit  </p>"},{"location":"rum/#mobile-rum-workshop-ios","title":"Mobile RUM Workshop: iOS","text":"<p>When using this workshop, ensure that the <code>Coralogix Package Dependencies</code> are updated: right-click on them and select <code>update</code>.</p> <p>Follow the Coralogix SDK instructions and update the environment variable stanza according to your environment:</p> <pre><code>let options = CoralogixExporterOptions(\n    coralogixDomain: CoralogixDomain.US2, // Set the Coralogix domain\n    userContext: nil,                     // No user context provided\n    environment: \"PROD\",                  // Environment set to production\n    application: \"CX-Demo-Swift\",         // Name of the application\n    version: \"1\",                         // Application version\n    publicKey: \"\",                        // Public key for authentication\n    ignoreUrls: [],                       // List of URLs to ignore\n    ignoreErrors: [],                     // List of errors to ignore\n    customDomainUrl: nil,                 // Custom domain URL (if any)\n    labels: [\"test\": \"example\"],          // Additional labels for the RUM data\n    debug: true                           // Debug mode enabled\n)\n</code></pre> <p>Each project should build and run on an iPhone emulator (15 Pro Max was tested) and emit telemetry to the Coralogix RUM platform.</p>"},{"location":"rum/#step-4-using-the-demo-app","title":"Step 4 - Using the Demo App","text":"<p>There are three current example tests on the demo app: - Network requests: Will send user session data while the app is running. - Exception: Will crash the app with an exception. Stop Xcode and then run the app in the emulator so the app restarts and instrumentation sends crash analytics to Coralogix. - Crash: Similar to the exception above\u2014crashes the app, stop Xcode, and re-run the app to send analytics.  </p>"},{"location":"rum/#react-native-workshop","title":"React Native Workshop","text":"<p>Follow the instructions in the repo directory: https://github.com/coralogix/workshops/tree/master/workshops/mobilerum/react</p>"}]}