extensions:
  health_check:
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679

receivers:
  otlp:
    protocols:
      grpc:
      http:
  hostmetrics:
    collection_interval: 15s
    scrapers:
      cpu:
      disk:
      load:
      filesystem:
      memory:
      network:
  filelog:
    include: [ path to your log file *.log ]
    start_at: beginning
  datadog:
    endpoint: 0.0.0.0:8127

  opencensus:

  # Collect own metrics
  prometheus:
    config:
      scrape_configs:
      - job_name: 'otel-collector'
        scrape_interval: 10s
        static_configs:
        - targets: ['0.0.0.0:8888']

  jaeger:
    protocols:
      grpc:
      thrift_binary:
      thrift_compact:
      thrift_http:

  zipkin:

processors:
  transform/dd_trace:
    error_mode: ignore
    trace_statements:
    - context: span
      statements:
      - set(resource.attributes["service.name"], attributes["service.name"])
  resourcedetection/env:
    detectors: ["system", "env"]
    system:
      resource_attributes:
        host.name:
          enabled: true
        host.id:
          enabled: true
  resourcedetection/ec2:
    detectors: ["ec2" ]
    ec2:
      resource_attributes:
        host.name:
          enabled: true
        host.id:
          enabled: true
  tail_sampling:
    decision_wait: 10s 
    expected_new_traces_per_sec: 1000
    policies:
      [
        {
            name: percent-sample-policy,
            type: probabilistic,
            probabilistic: {sampling_percentage: 100}
        },
        {
          name: errors-policy,
          type: status_code,
          status_code: { status_codes: [ERROR] }
        }
      ]
  batch:

exporters:
  # datadog:
  #   api:
  #     site: "us5.datadoghq.com"
  #     # # Apply your datadog site.
  #     key: "YOURDDKEYHERE"
  #     # # Apply your datadog API key.
  coralogix:
    # The Coralogix domain
    domain: "coralogix.us"
    # Your Coralogix private key is sensitive
    private_key: "YOURKEYHERE"

    # (Optional) Ordered list of Resource attributes that are used for Coralogix
    # AppName and SubSystem values. The first non-empty Resource attribute is used.
    # Example: application_name_attributes: ["k8s.namespace.name", "service.namespace"]
    # Example: subsystem_name_attributes: ["k8s.deployment.name", "k8s.daemonset.name", "service.name"]
    application_name_attributes:
    - "service.namespace"
    subsystem_name_attributes:
    - "service.name"

    # Traces, Metrics and Logs emitted by this OpenTelemetry exporter 
    # are tagged in Coralogix with the default application and subsystem constants.
    application_name: "cx-app-node"
    subsystem_name: "cx-app-node"

    # (Optional) Timeout is the timeout for every attempt to send data to the backend.
    timeout: 30s
  
  # use this section instead of the Coralogix exporter if not using a contrib version of the otel collector
  # otlp:
  #   endpoint: "<your coralogix ingress here>:443"
  #   headers:
  #     "Authorization": "<your coralogix key here>"
  #     "CX-Application-Name": "<your coralogix app name here>"
  #     "CX-Subsystem-Name": "<your coralogix subystemname name here>"
  #     ApplicationName: "<your application name here>"

service:
  pipelines:
    metrics:
      receivers: [otlp,hostmetrics]
      processors: [resourcedetection/env,resourcedetection/ec2,batch]
      exporters: [coralogix]
    logs:
      receivers: [otlp]
      processors: [resourcedetection/env,resourcedetection/ec2,batch]
      exporters: [coralogix]
    traces:
      receivers: [otlp, datadog]
      processors: [resourcedetection/env,resourcedetection/ec2,transform/dd_trace, batch]
      # exporters: [coralogix, datadog]
      exporters: [coralogix]

  extensions: [health_check, pprof, zpages]
